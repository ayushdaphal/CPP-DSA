// rate in a maze problem-->link--> https://practice.geeksforgeeks.org/problems/rat-in-a-maze-problem/1

// code:-
// //{ Driver Code Starts
// // Initial template for C++

// #include <bits/stdc++.h>
// using namespace std;


// // } Driver Code Ends
// // User function template for C++
// class Solution {
// private:
//     bool isSafe(int x, int y, int n, vector<vector<int>> visited, vector<vector<int>> &m) {
//         if (x >= 0 && x < n && y >= 0 && y < n && visited[x][y] == 0 && m[x][y] == 1) {
//             return true;
//         } else {
//             return false;
//         }
//     }

//     void solve(vector<vector<int>> &m, int n, vector<string> &ans, int x, int y, vector<vector<int>> visited, string path) {
//         // base case
//         if (x == n - 1 && y == n - 1) {
//             ans.push_back(path);
//             return;
//         }
//         visited[x][y] = 1;
        
//         // 4 choices: down, left, right, up
//         int newx, newy;

//         // Down
//         newx = x + 1;
//         newy = y;
//         if (isSafe(newx, newy, n, visited, m)) {
//             solve(m, n, ans, newx, newy, visited, path + "D");
//         }

//         // Left
//         newx = x;
//         newy = y - 1;
//         if (isSafe(newx, newy, n, visited, m)) {
//             solve(m, n, ans, newx, newy, visited, path + "L");
//         }

//         // Right
//         newx = x;
//         newy = y + 1;
//         if (isSafe(newx, newy, n, visited, m)) {
//             solve(m, n, ans, newx, newy, visited, path + "R");
//         }

//         // Up
//         newx = x - 1;
//         newy = y;
//         if (isSafe(newx, newy, n, visited, m)) {
//             solve(m, n, ans, newx, newy, visited, path + "U");
//         }
//         visited[x][y] = 0;
//     }

// public:
//     vector<string> findPath(vector<vector<int>> &m, int n) {
//         vector<string> ans;

//         if (m[0][0] == 0) {
//             return ans;
//         }
//         int srcx = 0;
//         int srcy = 0;

//         vector<vector<int>> visited(n, vector<int>(n, 0)); // Initialize with 0

//         string path = "";
//         solve(m, n, ans, srcx, srcy, visited, path);
//         sort(ans.begin(), ans.end());
//         return ans;
//     }
// };
